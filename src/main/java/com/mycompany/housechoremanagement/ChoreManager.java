/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.housechoremanagement;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dell
 */
public class ChoreManager extends javax.swing.JFrame {
    private DBConnection dbConnection;
List<String> signedUpUsers = new ArrayList<>();
//Populate the signed-up users list with user names during sign-up
// For example:
//signedUpUsers.add("username1");
// signedUpUsers.add("username2");
// signedUpUsers.add("username3");
    /**
     * Creates new form ChoreManager
     */
    public ChoreManager() {
        initComponents();
        connectDatabase();
        loadChores();
         loadSignedUpUsers();
           populateStatusComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void connectDatabase() {
        try {
            Connection conn = DBConnection.getConnection();
            if (conn != null) {
                System.out.println("Connected to database");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void loadSignedUpUsers() {
    signedUpUsers.clear();
    String sql = "SELECT Username FROM Users";
    try (PreparedStatement stmt = DBConnection.getConnection().prepareStatement(sql)) {
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            signedUpUsers.add(rs.getString("Username"));
        }
    } catch (SQLException e) {
        handleSQLException(e);
    }
}
    private void loadChores() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Clear table
        String sql = "SELECT ChoreId, ChoreName, Deadline, ChoreStatus FROM Chores";
        try (PreparedStatement stmt = DBConnection.getConnection().prepareStatement(sql)) {
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                int choreId = rs.getInt("ChoreId");
                String choreName = rs.getString("ChoreName");
                String deadline = rs.getString("Deadline");
                String status = rs.getString("ChoreStatus");
                model.addRow(new Object[]{choreId, choreName, deadline, status});
            }
        } catch (SQLException e) {
            handleSQLException(e);
        }
    }
    
     private void handleSQLException(SQLException e) {
        JOptionPane.showMessageDialog(this, "SQL Error: " + e.getMessage(), "SQL Error", JOptionPane.ERROR_MESSAGE);
    }
     
     
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jChorename = new javax.swing.JLabel();
        jdeadline = new javax.swing.JLabel();
        chorename = new javax.swing.JTextField();
        deadline = new javax.swing.JTextField();
        jBtAdd = new javax.swing.JButton();
        jBtUpdate = new javax.swing.JButton();
        jdelete = new javax.swing.JButton();
        jStatus = new javax.swing.JLabel();
        jbtstatusupdate = new javax.swing.JButton();
        jbtSave = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jAssignTo = new javax.swing.JLabel();
        jBtback = new javax.swing.JButton();
        Jusername = new javax.swing.JTextField();
        jComboBoxStatus = new javax.swing.JComboBox<>();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chore Manager");
        setFont(new java.awt.Font("12Akruti Image", 0, 10)); // NOI18N

        jChorename.setText("Chore Name");

        jdeadline.setText("Deadline");

        chorename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chorenameActionPerformed(evt);
            }
        });

        jBtAdd.setText("Add");
        jBtAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtAddActionPerformed(evt);
            }
        });

        jBtUpdate.setText("Update");
        jBtUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtUpdateActionPerformed(evt);
            }
        });

        jdelete.setText("Delete");
        jdelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jdeleteActionPerformed(evt);
            }
        });

        jStatus.setText("Status");

        jbtstatusupdate.setText("Update Status");
        jbtstatusupdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtstatusupdateActionPerformed(evt);
            }
        });

        jbtSave.setText("Save");
        jbtSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtSaveActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Chorelist", "Deadline", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jAssignTo.setText("Assign To");

        jBtback.setText("Back");
        jBtback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtbackActionPerformed(evt);
            }
        });

        Jusername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JusernameActionPerformed(evt);
            }
        });

        jComboBoxStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxStatusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 32, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jChorename)
                            .addComponent(jBtAdd)
                            .addComponent(jStatus))
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboBoxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(95, 95, 95)
                                .addComponent(jbtstatusupdate))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(chorename, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(30, 30, 30)
                                    .addComponent(jdeadline)
                                    .addGap(34, 34, 34)
                                    .addComponent(deadline, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jBtUpdate)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jdelete))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jBtback)
                .addGap(18, 18, 18)
                .addComponent(jAssignTo)
                .addGap(30, 30, 30)
                .addComponent(Jusername, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addComponent(jbtSave)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jChorename)
                    .addComponent(chorename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jdeadline)
                    .addComponent(deadline, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtAdd)
                    .addComponent(jBtUpdate)
                    .addComponent(jdelete))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jStatus)
                            .addComponent(jbtstatusupdate)
                            .addComponent(jComboBoxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 69, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jbtSave)
                            .addComponent(jAssignTo)
                            .addComponent(jBtback)
                            .addComponent(Jusername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chorenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chorenameActionPerformed
        // TODO add your handling code here:
         deadline.requestFocusInWindow();
    }//GEN-LAST:event_chorenameActionPerformed

    private void jBtAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtAddActionPerformed
        // TODO add your handling code here:
         String choreNameText = chorename.getText();
        String deadlineText = deadline.getText();

        // Check if both fields are filled
        if (choreNameText.isEmpty() || deadlineText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in both Chore Name and Deadline fields.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
    }//GEN-LAST:event_jBtAddActionPerformed

        
   String sql = "INSERT INTO Chores (ChoreName, Deadline, ChoreStatus) VALUES (?, ?, 'Pending')";
    try (Connection conn = DBConnection.getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {
        stmt.setString(1, choreNameText);
        stmt.setString(2, deadlineText);
        stmt.executeUpdate();
        loadChores();
        chorename.setText("");
        deadline.setText("");
        chorename.requestFocusInWindow();
    } catch (SQLException e) {
        handleSQLException(e);
    }
    }                 
    private void jBtUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtUpdateActionPerformed
        // TODO add your handling code here:
     int selectedRowIndex = jTable1.getSelectedRow();
    if (selectedRowIndex == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to update.", "No Selection", JOptionPane.ERROR_MESSAGE);
        return;
    }//GEN-LAST:event_jBtUpdateActionPerformed

      String updatedChoreName = chorename.getText();
    String updatedDeadline = deadline.getText();

    // Check if both fields are filled
    if (updatedChoreName.isEmpty() || updatedDeadline.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please fill in both Chore Name and Deadline fields.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Get the table model
   int choreId = (int) jTable1.getValueAt(selectedRowIndex, 0);
    String sql = "UPDATE Chores SET ChoreName = ?, Deadline = ? WHERE ChoreId = ?";
    try (Connection conn = DBConnection.getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {
        stmt.setString(1, updatedChoreName);
        stmt.setString(2, updatedDeadline);
        stmt.setInt(3, choreId);
        stmt.executeUpdate();
        loadChores();
        chorename.setText("");
        deadline.setText("");
        chorename.requestFocusInWindow();
    } catch (SQLException e) {
        handleSQLException(e);
    }
}
    private void jdeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jdeleteActionPerformed
        // TODO add your handling code here:
         int selectedRowIndex = jTable1.getSelectedRow();
    if (selectedRowIndex == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to delete.", "No Selection", JOptionPane.ERROR_MESSAGE);
        return;
    }//GEN-LAST:event_jdeleteActionPerformed

   int choreId = (int) jTable1.getValueAt(selectedRowIndex, 0);
    String sql = "DELETE FROM Chores WHERE ChoreId = ?";
    try (Connection conn = DBConnection.getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {
        stmt.setInt(1, choreId);
        stmt.executeUpdate();
        loadChores();
        chorename.setText("");
        deadline.setText("");
        chorename.requestFocusInWindow();
    } catch (SQLException e) {
        handleSQLException(e);
    }
} 
    private void jbtstatusupdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtstatusupdateActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = jTable1.getSelectedRow();
    if (selectedRowIndex == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to update the status.", "No Selection", JOptionPane.ERROR_MESSAGE);
        return;
    }//GEN-LAST:event_jbtstatusupdateActionPerformed

     String statusText = (String) jComboBoxStatus.getSelectedItem();
        int choreId = (int) jTable1.getValueAt(selectedRowIndex, 0);
        String sql = "UPDATE Chores SET ChoreStatus = ? WHERE ChoreId = ?";
        try (Connection conn = DBConnection.getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, statusText);
            stmt.setInt(2, choreId);
            stmt.executeUpdate();
            loadChores();
        } catch (SQLException e) {
            handleSQLException(e);
        }
    }
   
    private void jBtbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtbackActionPerformed
        // TODO add your handling code here:
        this.dispose();
    
    // Open the dashboard window
    DashBoard dashboard = new DashBoard();
    dashboard.setVisible(true);
    jBtback.setText("Back");
    jBtback.addActionListener((java.awt.event.ActionEvent evt1) -> {
    jBtbackActionPerformed(evt1);
        });

    }//GEN-LAST:event_jBtbackActionPerformed

    private void jbtSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtSaveActionPerformed
      
          DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    
    // Get the number of rows in the table
    int rowCount = model.getRowCount();
    
    // Iterate over the rows of the table
    for (int i = 0; i < rowCount; i++) {
        // Get the values from each column of the current row
        int choreId = (int) model.getValueAt(i, 0);
        String choreName = model.getValueAt(i, 0).toString();
        String deadline = model.getValueAt(i, 1).toString();
        String status = model.getValueAt(i, 2).toString();
        String assignedTo = model.getValueAt(i, 3).toString(); // Assuming the username is in the fourth column
        
        String sql = "UPDATE Chores SET ChoreName = ?, Deadline = ?, ChoreStatus = ?, AssignedTo = ? WHERE ChoreId = ?";
        try (Connection conn = DBConnection.getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, choreName);
            stmt.setString(2, deadline);
            stmt.setString(3, status);
            stmt.setString(4, assignedTo);
            stmt.setInt(5, choreId);
            stmt.executeUpdate();
        } catch (SQLException e) {
            handleSQLException(e);
        }
    }

    DashBoard dashboard = new DashBoard();
    dashboard.setVisible(true);
    this.dispose();
    }//GEN-LAST:event_jbtSaveActionPerformed

    private void JusernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JusernameActionPerformed
        // TODO add your handling code here:
          String assignedTo = Jusername.getText().trim();

    // Check if the entered username is empty
     if (!assignedTo.isEmpty()) {
        if (signedUpUsers.contains(assignedTo)) {
            int selectedRowIndex = jTable1.getSelectedRow();
            if (selectedRowIndex == -1) {
                JOptionPane.showMessageDialog(this, "Please select a row to assign.", "No Selection", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int choreId = (int) jTable1.getValueAt(selectedRowIndex, 0);
            String sql = "UPDATE Chores SET AssignedTo = ? WHERE ChoreId = ?";
            try (Connection conn = DBConnection.getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setString(1, assignedTo);
                stmt.setInt(2, choreId);
                stmt.executeUpdate();
                loadChores();
                JOptionPane.showMessageDialog(this, "Chore assigned to: " + assignedTo, "Chore Assignment", JOptionPane.INFORMATION_MESSAGE);
                Jusername.setText("");
            } catch (SQLException e) {
                handleSQLException(e);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Username not found. Please enter a valid username.", "User Not Found", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please enter a username.", "Input Error", JOptionPane.ERROR_MESSAGE);
    }
 
    }//GEN-LAST:event_JusernameActionPerformed

    private void jComboBoxStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxStatusActionPerformed
        int selectedRowIndex = jTable1.getSelectedRow();
    if (selectedRowIndex == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to update the status.", "No Selection", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String selectedStatus = (String) jComboBoxStatus.getSelectedItem();
    jTable1.setValueAt(selectedStatus, selectedRowIndex, 3); // Assuming the status is in the 4th column (index 3)

    int choreId = (int) jTable1.getValueAt(selectedRowIndex, 0); // Assuming ChoreId is in the 1st column (index 0)
    String sql = "UPDATE Chores SET ChoreStatus = ? WHERE ChoreId = ?";
    try (Connection conn = DBConnection.getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {
        stmt.setString(1, selectedStatus);
        stmt.setInt(2, choreId);
        stmt.executeUpdate();
    } catch (SQLException e) {
        handleSQLException(e);
    }
    }//GEN-LAST:event_jComboBoxStatusActionPerformed
 
    
    private void populateStatusComboBox() {
    jComboBoxStatus.addItem("Not Started");
    jComboBoxStatus.addItem("In Progress");
    jComboBoxStatus.addItem("Completed");
    
}
    
    // Get the table model
   
          
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChoreManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ChoreManager().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Jusername;
    private javax.swing.JTextField chorename;
    private javax.swing.JTextField deadline;
    private javax.swing.JLabel jAssignTo;
    private javax.swing.JButton jBtAdd;
    private javax.swing.JButton jBtUpdate;
    private javax.swing.JButton jBtback;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jChorename;
    private javax.swing.JComboBox<String> jComboBoxStatus;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jStatus;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jbtSave;
    private javax.swing.JButton jbtstatusupdate;
    private javax.swing.JLabel jdeadline;
    private javax.swing.JButton jdelete;
    // End of variables declaration//GEN-END:variables
}
